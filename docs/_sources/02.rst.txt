============
Installation
============

Requirements
============
* X86_64 (amd64) computer equipped with NVIDIA GPUs
* Ubuntu/linux operating system (Native or wsl2 on Microsoft Windows)
* Python3.6 or 3.10
* pip3
* CUDA11.0 or 11.6

Users can also use the virtual environments of venv and virtualenv. Anadconda/miniconda is not supported, but it may work.
Many of morphological operations in LD also work on the Windows native python3.

Preparation
===========

First, install dependencies on your Ubuntu system (3.X: your python version, i.e., 3.6 or 3.10):

.. code-block:: bash

    $ sudo apt install libc6 libstdc++6 libgcc1 zlib1g libexpat1 libpython3.X-dev

Obtain requirements.txt from `the github site <https://github.com/urakubo/lattice_dendrites.git>`_ , and install dependencies in Python3:

.. code-block:: bash

    $ pip3 install -r requirements.txt

Essentially, LD requires the following Python modules: numpy, h5py, skimage, trimesh, pymeshfix, pyvista, and opencv. Tutorials further require 'ffmpeg' and the Python modules 'Matplotlib' and 'Mayavi'.

Installation and settings
=========================

Download a deb file (Python 3.X, CUDA 11.0) from the directory "LM" of `the github site <https://github.com/urakubo/lattice_dendrites.git>`_ , and install it for lm and binaries:

.. code-block:: bash

    $ sudo apt install ./lattice-dendrites_2.3.0.1-py3X-cuda11.0_amd64.deb

Download/install pyLD, pyLM, and pySTDLM:

.. code-block:: bash

    $ pip3 install git+https://github.com/urakubo/lattice_dendrites.git


Then, set environment paths. Add the following lines in $HOME/.bashrc:


.. code-block:: bash

	# CUDA paths
	export PATH=/usr/local/cuda/bin:$PATH
	export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH


and execute the following command:

.. code-block:: bash

    $ source $HOME/.bashrc


Test execution
==============

Execute 'lm -l' to confirm successful installation. You will see the following message:

.. code-block:: bash

	$ lm -l
	Lattice Microbes 2.3.0 build by root on 1336a712b2ab at 2021-11-29 17:33:08 in 64-bit mode with options CUDA MPD:MAPPED_OVERFLOWS MPD:GLOBAL_S_MATRIX MPD:FREAKYFAST.
	Copyright (C) 2008-2016 Luthey-Schulten Group,
	University of Illinois at Urbana-Champaign.

	Running with 2/2 processor(s) and 2/2 CUDA device(s).
  		0:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=9847767040,mc=65536,ms=49152,r=65536,w=32,c=1545000
		1:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=11026366464,mc=65536,ms=49152,r=65536,w=32,c=1545000
	202X-XX-XX XX:XX:XX) Info: Program execution finished.

Also, confirm the successful import of LM/LD modules in python3:

.. code-block:: bash

	$ python3
	Python 3.6.9 (default, Jan 26 2021, 15:33:00)
	[GCC 8.4.0] on linux
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import lm
	>>> import pyLM
	>>> import pySTDLM
	>>> import pyLD
	Importing pyLD files:
	create_surface, save_uniem_annotator, CreateVolumeFromReconstruct, GenerateClosedVolumesFromUniEM, BuildAnyShape, RotateVolume, utils, get_labeled_concs
	>>>


============
Installation
============

Requirements
============
* NVIDIA GPU-powered computers
* Ubuntu18.04 or Ubuntu20.04
* Python3.6/Ubuntu18.04 or Python3.8/Ubuntu20.04
* (pip)
* (virtualenv)

Morphological operations in LD also work on Microsoft Windows 10/11.

Preparation
===========
On your terminal

.. code-block:: bash

    $ pip install sphinx

.. code-block:: bash

    virtualenv env
    source env/bin/activate

Download and file extraction
============================
On your terminal, download LD by executing the following command:

.. code-block:: bash

    $ git clone https://github.com/urakubo/lattice_dendrites.git


Then locate the 


We parepared LM for py3.6/CUDA11.0/ubuntu18.04, you can retrieve it by

.. code-block:: bash

    $ cd $LD_INSTALL_DIRECTORY
    $ cp $LD/lm/lm_py3.6_cuda11.0_ubuntu18.04.tar.gz ./
    $ tar -xvzf lm_py3.6_cuda11.0_ubuntu18.04.tar.gz


Set environment paths. In the case of bash, add the following lines in $HOME/.bashrc:

.. code-block:: bash

	# LM paths
	export PATH=$LD_INSTALL_DIRECTORY/bin:$PATH
	export PYTHONPATH=$LD_INSTALL_DIRECTORYlib/lm:$PYTHONPATH
	export PYTHONPATH=$LD_INSTALL_DIRECTORY/lib/python:$PYTHONPATH
	export LD_LIBRARY_PATH=$LD_INSTALL_DIRECTORY/hdf5_1.12.0_gcc8.4.0/lib:$LD_INSTALL_DIRECTORY

	# CUDA paths
	export PATH=/usr/local/cuda/bin:$PATH
	export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

	# System paths
	export LD_LIBRARY_PATH=/lib64:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

	# Requirements in /usr/local/cuda/lib64:
	# libcudart.so.11.0
	# Requirements in /lib64:
	# ld-linux-x86-64.so.2
	# Requirements in /usr/lib/x86_64-linux-gnu:
	# libstdc++.so.6, libpython3.6m.so.1.0
	# Requirements in /lib/x86_64-linux-gnu:
	# libm.so.6, libgcc_s.so.1, libpthread.so.0, libc.so.6, libz.so.1, libdl.so.2, librt.so.1, libexpat.so.1, libutil.so.1

and the execute the following command:

.. code-block:: bash

    $ source .bashrc


Test execution
==============

Execute 'lm -l' to confirm successful installation. You will see the following message:

.. code-block:: bash

	$ lm -l
	Lattice Microbes 2.3a build by root on 1336a712b2ab at 2021-11-10 01:18:56 in 64-bit mode with options CUDA MPD:MAPPED_OVERFLOWS MPD:GLOBAL_S_MATRIX MPD:FREAKYFAST.
	Copyright (C) 2008-2016 Luthey-Schulten Group,
	University of Illinois at Urbana-Champaign.

	Running with 2/2 processor(s) and 2/2 CUDA device(s).
  		0:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=9847767040,mc=65536,ms=49152,r=65536,w=32,c=1545000
		1:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=11026366464,mc=65536,ms=49152,r=65536,w=32,c=1545000
	202X-XX-XX XX:XX:XX) Info: Program execution finished.

Also, confirm the successful import of LM/LD modules in python3:

.. code-block:: bash

	$ python3
	Python 3.6.9 (default, Jan 26 2021, 15:33:00)
	[GCC 8.4.0] on linux
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import pyLM
	>>> import pySTDLM
	>>> import pyLD
	Importing pyLD files:
	create_surface, save_uniem_annotator, CreateVolumeFromReconstruct, GenerateClosedVolumesFromUniEM, BuildAnyShape, RotateVolume, utils, get_labeled_concs
	>>>


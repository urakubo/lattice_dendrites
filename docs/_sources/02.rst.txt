============
Installation
============

Requirements
============
* NVIDIA GPU-powered computers
* Linux operating system (e.g., Ubuntu18.04 or 20.04)
* Python3.6.X/CUDA11.0 or Python3.8.X/CUDA11.4
* pip3
* ffmpeg (preferred)

If preferred, users can use a virtual environment such as venv, virtualenv, and conda.
Many of morphological operations in LD also work on Microsoft Windows 10 and 11.

Preparation
===========
Obtain requirements.txt from `the github site <https://github.com/urakubo/lattice_dendrites.git>`_ , and install dependencies:

.. code-block:: bash

    $ pip3 install -r requirements.txt

Essentially, LD requires numpy, h5py, skimage, trimesh, gzip, pymeshfix, pyvista, and opencv. Tutorials further require matplolib and mayavi.


Installation and settings
=========================
Download/install pyLD, pyLM, and pySTDLM:

.. code-block:: bash

    $ pip install git+https://github.com/urakubo/lattice_dendrites.git


Find the installation paths by executing the following command:

.. code-block:: bash

    $ check_lm_install_dir

This command shows two paths: $LM_BIN_PATH and $LM_LIB_PATH.
Then, set environment paths. Add the following lines in $HOME/.bashrc:


.. code-block:: bash

	# LM paths
	export PATH=$LM_BIN_PATH:$PATH
	export LD_LIBRARY_PATH=$LM_LIB_PATH:$LD_LIBRARY_PATH

	# CUDA paths
	export PATH=/usr/local/cuda/bin:$PATH
	export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

	# System paths
	export LD_LIBRARY_PATH=/lib64:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

	# Requirements in /usr/local/cuda/lib64:
	# libcudart.so.11.0
	# Requirements in /lib64:
	# ld-linux-x86-64.so.2
	# Requirements in /usr/lib/x86_64-linux-gnu:
	# libstdc++.so.6, libpython3.6m.so.1.0
	# Requirements in /lib/x86_64-linux-gnu:
	# libm.so.6, libgcc_s.so.1, libpthread.so.0, libc.so.6, libz.so.1, libdl.so.2, librt.so.1, libexpat.so.1, libutil.so.1

and execute the following command:

.. code-block:: bash

    $ source $HOME/.bashrc


Test execution
==============

Execute 'lm -l' to confirm successful installation. You will see the following message:

.. code-block:: bash

	$ lm -l
	Lattice Microbes 2.3.0 build by root on 1336a712b2ab at 2021-11-29 17:33:08 in 64-bit mode with options CUDA MPD:MAPPED_OVERFLOWS MPD:GLOBAL_S_MATRIX MPD:FREAKYFAST.
	Copyright (C) 2008-2016 Luthey-Schulten Group,
	University of Illinois at Urbana-Champaign.

	Running with 2/2 processor(s) and 2/2 CUDA device(s).
  		0:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=9847767040,mc=65536,ms=49152,r=65536,w=32,c=1545000
		1:n="GeForce RTX 2080 Ti",v=7.5,mt=11554717696,mf=11026366464,mc=65536,ms=49152,r=65536,w=32,c=1545000
	202X-XX-XX XX:XX:XX) Info: Program execution finished.

Also, confirm the successful import of LM/LD modules in python3:

.. code-block:: bash

	$ python3
	Python 3.6.9 (default, Jan 26 2021, 15:33:00)
	[GCC 8.4.0] on linux
	Type "help", "copyright", "credits" or "license" for more information.
	>>> import pyLM
	>>> import pySTDLM
	>>> import pyLD
	Importing pyLD files:
	create_surface, save_uniem_annotator, CreateVolumeFromReconstruct, GenerateClosedVolumesFromUniEM, BuildAnyShape, RotateVolume, utils, get_labeled_concs
	>>>

